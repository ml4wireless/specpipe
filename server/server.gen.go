// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Device defines model for device.
type Device struct {
	Freq       *string  `json:"freq,omitempty"`
	Latitude   *float32 `json:"latitude,omitempty"`
	Longitude  *float32 `json:"longitude,omitempty"`
	Name       *string  `json:"name,omitempty"`
	SampleRate *string  `json:"sample_rate,omitempty"`
}

// DeviceResponse defines model for device_response.
type DeviceResponse struct {
	Device *Device `json:"device,omitempty"`
}

// DevicesResponse defines model for devices_response.
type DevicesResponse struct {
	Devices *[]Device `json:"devices,omitempty"`
}

// ErrorResponse defines model for error_response.
type ErrorResponse struct {
	Detail *string `json:"detail,omitempty"`
	Title  *string `json:"title,omitempty"`
}

// UpdateDeviceRequest defines model for update_device_request.
type UpdateDeviceRequest struct {
	Freq *string `json:"freq,omitempty"`
}

// PutDevicesDeviceidJSONRequestBody defines body for PutDevicesDeviceid for application/json ContentType.
type PutDevicesDeviceidJSONRequestBody = UpdateDeviceRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List devices
	// (GET /devices)
	GetDevices(c *gin.Context)
	// Read device configuration
	// (GET /devices/{deviceid})
	GetDevicesDeviceid(c *gin.Context, deviceid string)
	// Update device
	// (PUT /devices/{deviceid})
	PutDevicesDeviceid(c *gin.Context, deviceid string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetDevices operation middleware
func (siw *ServerInterfaceWrapper) GetDevices(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDevices(c)
}

// GetDevicesDeviceid operation middleware
func (siw *ServerInterfaceWrapper) GetDevicesDeviceid(c *gin.Context) {

	var err error

	// ------------- Path parameter "deviceid" -------------
	var deviceid string

	err = runtime.BindStyledParameter("simple", false, "deviceid", c.Param("deviceid"), &deviceid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deviceid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDevicesDeviceid(c, deviceid)
}

// PutDevicesDeviceid operation middleware
func (siw *ServerInterfaceWrapper) PutDevicesDeviceid(c *gin.Context) {

	var err error

	// ------------- Path parameter "deviceid" -------------
	var deviceid string

	err = runtime.BindStyledParameter("simple", false, "deviceid", c.Param("deviceid"), &deviceid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deviceid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutDevicesDeviceid(c, deviceid)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/devices", wrapper.GetDevices)
	router.GET(options.BaseURL+"/devices/:deviceid", wrapper.GetDevicesDeviceid)
	router.PUT(options.BaseURL+"/devices/:deviceid", wrapper.PutDevicesDeviceid)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xUwY7TMBD9lWrgGDXR7nLxDbSAKhBUrDihqvLGk65Xie0djytVVf4d2UnaUiLUhYJ6",
	"4BQnefa8ee95tlDaxlmDhj2ILfjyARuZlgrXusS4kkpp1tbIek7WIbFGD6KStccM3MGnLVSET/HJG4cg",
	"wDNps4I2g1qy5qDSeZWlRjIIqGorGbIBbUJzj5TQ1qyeATeywdGqXjauxiVJHvvf7o6y949YctzRdb0k",
	"9M4a/9z295q9JKxAwIt8r2/ei5v3qF/U939GIC01Y+NPpbJjIonkZpwaEln6fWIsdT1qEmuuT7UnOCUZ",
	"lzuXngJ6Pk9Gfy4XP2lT2QTuSMKdw3KuHU7ukNZIk9fzGWSwRvLaGhBQTK+nV5GpdWik0yDgelpMC8jA",
	"SX5IBPIDl1aY6Ed+MvKfKRDwHvm2h2QwCJ7gV0URH6U1jKZr3Llal2lv/ugjh+EWn+b9QdRSwwp9Sdpx",
	"187nD7GXV2esepSikZozw0hG1oPEb+OO5I8PTSNpAwI+as8TtdOI5cqD+Dbcv0UED/3l226hVXuC4Lc9",
	"NvlFskFGikdvj0iqPU7H92guDJPo8G/MqCZUIJgCZgcqHedv8de9PsHqm+LmH1r9yfLknQ1GXWbKvqBU",
	"fcompTWVXoUuNGORy8CFkWjNw6VEK83KN1Ztzqby+DROYv/Irf0f7QuL9tdkXR/u0Qka4Wl/l9FANQjI",
	"1wW0i/Z7AAAA//90ryRPNwoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
