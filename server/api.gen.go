// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ErrorResponse defines model for error_response.
type ErrorResponse struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// FmDevice defines model for fm_device.
type FmDevice struct {
	Freq       string  `json:"freq"`
	Latitude   float32 `json:"latitude"`
	Longitude  float32 `json:"longitude"`
	Name       string  `json:"name"`
	SampleRate string  `json:"sample_rate"`
}

// FmDeviceResponse defines model for fm_device_response.
type FmDeviceResponse struct {
	Device FmDevice `json:"device"`
}

// FmDevicesResponse defines model for fm_devices_response.
type FmDevicesResponse struct {
	Devices []FmDevice `json:"devices"`
}

// UpdateFmDeviceRequest defines model for update_fm_device_request.
type UpdateFmDeviceRequest struct {
	Freq string `json:"freq"`
}

// PutFmDevicesDevicenameJSONRequestBody defines body for PutFmDevicesDevicename for application/json ContentType.
type PutFmDevicesDevicenameJSONRequestBody = UpdateFmDeviceRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List FM devices
	// (GET /fm/devices)
	GetFmDevices(c *gin.Context)
	// Read FM device configuration
	// (GET /fm/devices/{devicename})
	GetFmDevicesDevicename(c *gin.Context, devicename string)
	// Update FM device
	// (PUT /fm/devices/{devicename})
	PutFmDevicesDevicename(c *gin.Context, devicename string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetFmDevices operation middleware
func (siw *ServerInterfaceWrapper) GetFmDevices(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFmDevices(c)
}

// GetFmDevicesDevicename operation middleware
func (siw *ServerInterfaceWrapper) GetFmDevicesDevicename(c *gin.Context) {

	var err error

	// ------------- Path parameter "devicename" -------------
	var devicename string

	err = runtime.BindStyledParameter("simple", false, "devicename", c.Param("devicename"), &devicename)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter devicename: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFmDevicesDevicename(c, devicename)
}

// PutFmDevicesDevicename operation middleware
func (siw *ServerInterfaceWrapper) PutFmDevicesDevicename(c *gin.Context) {

	var err error

	// ------------- Path parameter "devicename" -------------
	var devicename string

	err = runtime.BindStyledParameter("simple", false, "devicename", c.Param("devicename"), &devicename)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter devicename: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutFmDevicesDevicename(c, devicename)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/fm/devices", wrapper.GetFmDevices)
	router.GET(options.BaseURL+"/fm/devices/:devicename", wrapper.GetFmDevicesDevicename)
	router.PUT(options.BaseURL+"/fm/devices/:devicename", wrapper.PutFmDevicesDevicename)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xVTU/cMBD9K9G0x2izAnrJrYhSoX6tQD1VaGXiyWIUfzAer7Ra5b9Xdja7AQJaWoQ4",
	"cIrljGfevPfGXkNltbMGDXso1+Cra9QiLZHI0pzQO2s8xh0hpWJljWhmZB0SK/RQ1qLxmIMbbK1BIgvV",
	"xBWvHEIJnkmZBbQ5sOIGR/60ORDeBkUoofzTZ+jjL/M+3l7dYMUxU63nEpeqei64mvB2FFojWHGQKV9t",
	"SQuGEurGCoZteRP0FVKKtmbxjHAjNI5W9UK7BuckeA9aEvYB0iGMTY27GZ8k7t/l7Wn/SFhDCR+KnY+K",
	"jYmKnT4PxU3bT2Lz/wcuLRWj9s+AucUjiMTqEdh+FHdwUjDOh9TeBvT8Mt4cc8FDFDFMmdqmBN2YwYXD",
	"aqYcZhdIS6Ts8+wMclgieWUNlDCdHE4OYgPWoRFOQQmHk+lkCjk4wdcJVFHrYsDqAlNXEbaIbZ1JKOEr",
	"8qk+2QRFtJ126cDBdBo/lTWMpmPEuUZV6XRx4yOQ/u7ZW62BP1LjEn1FynHX1q9vsadPL1j43n04UvPM",
	"MJIRTU/1l3giaeeD1oJWUMJ35Tk7/ZHJLVMsFn44EzF+QHix7hZxtNu92D/ZxicNSWhkpFhjfQ9wlznb",
	"hKq4FTXvL5I+YPN/Z0CmgPmAtvtmvXwN/feQ/+hV5T8WMjvvht531Y9esfpPy9mpDUa+Td+fo5A732eV",
	"NbVahM7BY0OQgwsjPp+FN+fzJPixlasXY/zRp6S9+w5EeO37qL2P2t1R+53ssxu20TcmnkgpunkJ1EAJ",
	"xXIK7WX7NwAA//8uknAwFQwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
