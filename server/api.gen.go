// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ErrorResponse defines model for error_response.
type ErrorResponse struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// FmDevice defines model for fm_device.
type FmDevice struct {
	Freq         string  `json:"freq"`
	Latitude     float32 `json:"latitude"`
	Longitude    float32 `json:"longitude"`
	Name         string  `json:"name"`
	ResampleRate string  `json:"resample_rate"`
	SampleRate   string  `json:"sample_rate"`
}

// FmDeviceResponse defines model for fm_device_response.
type FmDeviceResponse struct {
	Device FmDevice `json:"device"`
}

// FmDevicesResponse defines model for fm_devices_response.
type FmDevicesResponse struct {
	Devices []FmDevice `json:"devices"`
}

// IqDevice defines model for iq_device.
type IqDevice struct {
	Freq       string  `json:"freq"`
	Latitude   float32 `json:"latitude"`
	Longitude  float32 `json:"longitude"`
	Name       string  `json:"name"`
	SampleRate string  `json:"sample_rate"`
}

// IqDeviceResponse defines model for iq_device_response.
type IqDeviceResponse struct {
	Device IqDevice `json:"device"`
}

// IqDevicesResponse defines model for iq_devices_response.
type IqDevicesResponse struct {
	Devices []IqDevice `json:"devices"`
}

// UpdateFmDeviceRequest defines model for update_fm_device_request.
type UpdateFmDeviceRequest struct {
	Freq         string  `json:"freq"`
	ResampleRate *string `json:"resample_rate,omitempty"`
	SampleRate   *string `json:"sample_rate,omitempty"`
}

// UpdateIqDeviceRequest defines model for update_iq_device_request.
type UpdateIqDeviceRequest struct {
	Freq       string  `json:"freq"`
	SampleRate *string `json:"sample_rate,omitempty"`
}

// PutFmDevicesDevicenameJSONRequestBody defines body for PutFmDevicesDevicename for application/json ContentType.
type PutFmDevicesDevicenameJSONRequestBody = UpdateFmDeviceRequest

// PutIqDevicesDevicenameJSONRequestBody defines body for PutIqDevicesDevicename for application/json ContentType.
type PutIqDevicesDevicenameJSONRequestBody = UpdateIqDeviceRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List FM devices
	// (GET /fm/devices)
	GetFmDevices(c *gin.Context)
	// Read FM device configuration
	// (GET /fm/devices/{devicename})
	GetFmDevicesDevicename(c *gin.Context, devicename string)
	// Update FM device
	// (PUT /fm/devices/{devicename})
	PutFmDevicesDevicename(c *gin.Context, devicename string)
	// List IQ devices
	// (GET /iq/devices)
	GetIqDevices(c *gin.Context)
	// Read IQ device configuration
	// (GET /iq/devices/{devicename})
	GetIqDevicesDevicename(c *gin.Context, devicename string)
	// Update IQ device
	// (PUT /iq/devices/{devicename})
	PutIqDevicesDevicename(c *gin.Context, devicename string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetFmDevices operation middleware
func (siw *ServerInterfaceWrapper) GetFmDevices(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFmDevices(c)
}

// GetFmDevicesDevicename operation middleware
func (siw *ServerInterfaceWrapper) GetFmDevicesDevicename(c *gin.Context) {

	var err error

	// ------------- Path parameter "devicename" -------------
	var devicename string

	err = runtime.BindStyledParameter("simple", false, "devicename", c.Param("devicename"), &devicename)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter devicename: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFmDevicesDevicename(c, devicename)
}

// PutFmDevicesDevicename operation middleware
func (siw *ServerInterfaceWrapper) PutFmDevicesDevicename(c *gin.Context) {

	var err error

	// ------------- Path parameter "devicename" -------------
	var devicename string

	err = runtime.BindStyledParameter("simple", false, "devicename", c.Param("devicename"), &devicename)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter devicename: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutFmDevicesDevicename(c, devicename)
}

// GetIqDevices operation middleware
func (siw *ServerInterfaceWrapper) GetIqDevices(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetIqDevices(c)
}

// GetIqDevicesDevicename operation middleware
func (siw *ServerInterfaceWrapper) GetIqDevicesDevicename(c *gin.Context) {

	var err error

	// ------------- Path parameter "devicename" -------------
	var devicename string

	err = runtime.BindStyledParameter("simple", false, "devicename", c.Param("devicename"), &devicename)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter devicename: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetIqDevicesDevicename(c, devicename)
}

// PutIqDevicesDevicename operation middleware
func (siw *ServerInterfaceWrapper) PutIqDevicesDevicename(c *gin.Context) {

	var err error

	// ------------- Path parameter "devicename" -------------
	var devicename string

	err = runtime.BindStyledParameter("simple", false, "devicename", c.Param("devicename"), &devicename)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter devicename: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutIqDevicesDevicename(c, devicename)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/fm/devices", wrapper.GetFmDevices)
	router.GET(options.BaseURL+"/fm/devices/:devicename", wrapper.GetFmDevicesDevicename)
	router.PUT(options.BaseURL+"/fm/devices/:devicename", wrapper.PutFmDevicesDevicename)
	router.GET(options.BaseURL+"/iq/devices", wrapper.GetIqDevices)
	router.GET(options.BaseURL+"/iq/devices/:devicename", wrapper.GetIqDevicesDevicename)
	router.PUT(options.BaseURL+"/iq/devices/:devicename", wrapper.PutIqDevicesDevicename)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXT2/bPgz9KgZ/v6MRe1t38W1F1yHYv6zFTkMRqBadqrAlRaIDBIG/+yA5dtzUTZM1",
	"DdoipwgKJT6Sj3zyAlJVaCVRkoVkATa9wYL5JRqjzNig1UpadDuMc0FCSZaPjNJoSKCFJGO5xRB0Z2sB",
	"HImJ3K1orhESsGSEnEAVAgnKseefKgSD01IY5JD8aW5o7K/Cxl5d32JK7qasGHOciXRXcJnBaS+0nJGg",
	"kvv7MmUKRpBAlitG0LqXZXGNxlsrOdnBXLICe70atKzQOY4No36Lzf+vJc5H14mlC3SJYt3nXQ8bU/3v",
	"hGgK9b/BDBL4L1oxL1rSLlpV9D4d/PZGbPZp4PxSEBZ2B5gtHmYMmz8A2/biFtM3Qd/9k/MxMraJe14y",
	"ruqzAxnbQwcjYwfmE8hYas4Ix90+n5ZoaV/cfI4htyGOLkX2Gsc+UDozITPlL6jVEC41piOhMbhEM0MT",
	"fBoNIYQZGiuUhATiQTx45wAojZJpAQl8GMSDGELQjG486Cgrog57JuijdmExF/aQQwJfkM6Ls6WRL4vn",
	"qD/wPo7dT6okoawzpnUuUn86urUOSPNE2HpEdvrAB87RpkZoqsP6+dXF9HGPjteeLT0+h5LQSJY3qf7s",
	"Tvja2bIomJlDAt+EpeD8e8DbTBGb2G7vO/tOwqNFvXAjrNoq+2etva+hYQUSGudjsQa4vjlYmgq35Wre",
	"DMzGoJX2hoBkSgw7aVsn69Uh6r9F+U8OWv5TxoOLeijY2vvJAb3/UBScq1Lyl8n7C2R8xfsgVTITk7Jm",
	"cF8ThKDLHp6PyhfHc1/wU8Xne8v4g5JZ3dUBB686ttqx1e622m9Pn1WzPaQxYrqNqA+nBxD1vsftaxP1",
	"4a/HRH2V8K1Fvc3+2xb1ng+v46R5JaLe8v4pov7SeP5son7/+/HAon5stdcs6m2z9WqMO+GvqPulNDkk",
	"EM1iqK6qvwEAAP//IoUgcJEXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
