"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[843],{5103:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var i=s(4848),r=s(8453);const l={title:"Setup SpecPipe Edge and Server",sidebar_position:1},a="Setup SpecPipe Edge Device, Server, Controller Plane and Dashboards",d={id:"setup/sever-edge-setup",title:"Setup SpecPipe Edge and Server",description:"Note: This guide only applies if you want to setup to send Radio Data as an Edge Node. If you only want to build an application that accesses data, you don't need to have an SDR.",source:"@site/docs/setup/sever-edge-setup.md",sourceDirName:"setup",slug:"/setup/sever-edge-setup",permalink:"/specpipe/setup/sever-edge-setup",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Setup SpecPipe Edge and Server",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Setup",permalink:"/specpipe/category/setup"},next:{title:"Setup SpecPipe Application",permalink:"/specpipe/setup/application"}},t={},c=[{value:"1. Install Dependencies for librtlsdr",id:"1-install-dependencies-for-librtlsdr",level:3},{value:"For Linux Users",id:"for-linux-users",level:4},{value:"For Mac Users using Apple silicon",id:"for-mac-users-using-apple-silicon",level:4},{value:"2. Install librtlsdr",id:"2-install-librtlsdr",level:3},{value:"Setup for installing librtlsdr",id:"setup-for-installing-librtlsdr",level:4},{value:"For Linux Users",id:"for-linux-users-1",level:4},{value:"For Mac Users using Apple silicon",id:"for-mac-users-using-apple-silicon-1",level:4},{value:"3. Build Docker Image (Optional)",id:"3-build-docker-image-optional",level:3},{value:"4. Allow remote access of SDR hardware within container",id:"4-allow-remote-access-of-sdr-hardware-within-container",level:3},{value:"5. Setting up SpecPipe server",id:"5-setting-up-specpipe-server",level:3},{value:"NATS JetStream Subjects",id:"nats-jetstream-subjects",level:4},{value:"6. Running SpecPipe Edge Device Device",id:"6-running-specpipe-edge-device-device",level:3},{value:"7. Setting up Controller Plane",id:"7-setting-up-controller-plane",level:3},{value:"Cloud APIs",id:"cloud-apis",level:5},{value:"8. Viewing Graphana Dashboard",id:"8-viewing-graphana-dashboard",level:3}];function o(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"setup-specpipe-edge-device-server-controller-plane-and-dashboards",children:"Setup SpecPipe Edge Device, Server, Controller Plane and Dashboards"}),"\n",(0,i.jsxs)(n.p,{children:["Note: This guide only applies if you want to setup to send Radio Data as an ",(0,i.jsx)(n.a,{href:"../architecture#edge-nodes",children:"Edge Node"}),". If you only want to build an application that accesses data, you don't need to have an SDR."]}),"\n",(0,i.jsx)(n.h3,{id:"1-install-dependencies-for-librtlsdr",children:"1. Install Dependencies for librtlsdr"}),"\n",(0,i.jsxs)(n.p,{children:["In order to extract raw data from the SDR hardware, the ",(0,i.jsx)(n.code,{children:"librtlsdr"})," binaries have to be installed on the host machine. Before we install these binaries, we need to install ",(0,i.jsx)(n.code,{children:"gcc"}),", ",(0,i.jsx)(n.code,{children:"g++"}),", ",(0,i.jsx)(n.code,{children:"make"}),", ",(0,i.jsx)(n.code,{children:"cmake"})," and ",(0,i.jsx)(n.code,{children:"libusb"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"for-linux-users",children:"For Linux Users"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo apt-get update\nsudo apt-get -y install build-essential cmake libusb-1.0-0-dev\n"})}),"\n",(0,i.jsx)(n.h4,{id:"for-mac-users-using-apple-silicon",children:"For Mac Users using Apple silicon"}),"\n",(0,i.jsxs)(n.p,{children:["Install ",(0,i.jsx)(n.code,{children:"cmake"})," and ",(0,i.jsx)(n.code,{children:"libusb"})," via Homebrew."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"brew install cmake libusb\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Find the version and library paths of ",(0,i.jsx)(n.code,{children:"libusb"})," so that they can be used in the next step"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"brew ls libusb\n"})}),"\n",(0,i.jsx)(n.p,{children:"The two paths that we will need here are:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["The path to the folder that contains ",(0,i.jsx)(n.code,{children:"libusb.h"})," e.g."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"/opt/homebrew/Cellar/libusb/1.0.26/include/libusb-1.0\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["The path to the ",(0,i.jsx)(n.code,{children:".dylib"})," file e.g."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"/opt/homebrew/Cellar/libusb/1.0.26/lib/libusb-1.0.0.dylib\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-install-librtlsdr",children:"2. Install librtlsdr"}),"\n",(0,i.jsx)(n.p,{children:"Build and install the librtlsdr binaries and libraries"}),"\n",(0,i.jsx)(n.h4,{id:"setup-for-installing-librtlsdr",children:"Setup for installing librtlsdr"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/minghsu0107/librtlsdr\ncd librtlsdr\nmkdir build && cd build\n"})}),"\n",(0,i.jsx)(n.h4,{id:"for-linux-users-1",children:"For Linux Users"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cmake ../\nsudo make && sudo make install\n"})}),"\n",(0,i.jsx)(n.h4,{id:"for-mac-users-using-apple-silicon-1",children:"For Mac Users using Apple silicon"}),"\n",(0,i.jsxs)(n.p,{children:["We need to set the appropriate configuration and library paths for the system when calling ",(0,i.jsx)(n.code,{children:"cmake"}),". Specifically, we'll need to set the options:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"DLIBUSB_INCLUDE_DIR"})," to the path to the folder that contains ",(0,i.jsx)(n.code,{children:"libusb.h"})," found above"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"DLIBUSB_LIBRARY"})," to the path to the ",(0,i.jsx)(n.code,{children:".dylib"})," file found above"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For Mac M2, an example command is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cmake -DCMAKE_HOST_SYSTEM_PROCESSOR:STRING=arm64 -DLIBUSB_INCLUDE_DIR=/opt/homebrew/Cellar/libusb/1.0.26/include/libusb-1.0 -DLIBUSB_LIBRARY=/opt/homebrew/lib/libusb-1.0.dylib ../\nsudo make && sudo make install\n"})}),"\n",(0,i.jsx)(n.p,{children:"For Mac M1, an example command is the following. Note that the path to the libusb-1.0 is different for the machines."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cmake -DCMAKE_HOST_SYSTEM_PROCESSOR:STRING=arm64 -DLIBUSB_INCLUDE_DIR=/usr/local/Cellar/libusb/1.0.26/include/libusb-1.0 -DLIBUSB_LIBRARY=/usr/local/lib/libusb-1.0.dylib ../\nsudo make && sudo make install\n"})}),"\n",(0,i.jsx)(n.p,{children:"After building and installing librtlsdr, the files are located in the following directories:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Header files are installed to ",(0,i.jsx)(n.code,{children:"/usr/local/include"})]}),"\n",(0,i.jsxs)(n.li,{children:["Library files are installed to ",(0,i.jsx)(n.code,{children:"/usr/local/lib"})]}),"\n",(0,i.jsxs)(n.li,{children:["Executable binaries are installed to ",(0,i.jsx)(n.code,{children:"/usr/local/bin"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-build-docker-image-optional",children:"3. Build Docker Image (Optional)"}),"\n",(0,i.jsxs)(n.p,{children:["Building the Docker images locally is optional since prebuilt images are available on DockerHub.\nNavigate to the root of the ",(0,i.jsx)(n.code,{children:"specpipe"})," project and build the docker image."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"export DOCKER_DEFAULT_PLATFORM=linux/amd64\nmake docker VERSION=v0.2.1\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-allow-remote-access-of-sdr-hardware-within-container",children:"4. Allow remote access of SDR hardware within container"}),"\n",(0,i.jsxs)(n.p,{children:["Start a ",(0,i.jsx)(n.code,{children:"rtl_rpcd"})," daemon on the host machine, which allows remote access of SDR hardware at ",(0,i.jsx)(n.code,{children:"127.0.0.1:40000"})," via ",(0,i.jsx)(n.code,{children:"librtlsdr"})," command-line tools."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"RTLSDR_RPC_SERV_ADDR=127.0.0.1 RTLSDR_RPC_SERV_PORT=40000 rtl_rpcd >> rtlrpcd.log 2>&1 &\n"})}),"\n",(0,i.jsx)(n.h3,{id:"5-setting-up-specpipe-server",children:"5. Setting up SpecPipe server"}),"\n",(0,i.jsxs)(n.p,{children:["Start NATS JetStream container and create stream ",(0,i.jsx)(n.code,{children:"specpipe"}),", ",(0,i.jsx)(n.code,{children:"specpipe-iq"})," and KV store ",(0,i.jsx)(n.code,{children:"specpipe"})," respectively. This will also create Prometheus, Grafana, and NATS exporter containers, which are used for monitoring and alerting."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"export DOCKER_DEFAULT_PLATFORM=linux/amd64\ndocker-compose up -d\n"})}),"\n",(0,i.jsx)(n.h4,{id:"nats-jetstream-subjects",children:"NATS JetStream Subjects"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Demodulated data pipeline: ",(0,i.jsx)(n.code,{children:"specpipe.data.<sdr_type>.<device_name>"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Supported SDR types: ",(0,i.jsx)(n.code,{children:"iq"}),", ",(0,i.jsx)(n.code,{children:"fm"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["IQ data pipeline: ",(0,i.jsx)(n.code,{children:"specpipe-iq.data.iq.<device_name>"})]}),"\n",(0,i.jsxs)(n.li,{children:["Cluster commands: ",(0,i.jsx)(n.code,{children:"specpipe-cluster.<sdr_type>.<device_name>.<cmd>"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Supported commands:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"health"})," - For health checks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"watchcfg"})," - For dynamic configuration"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"6-running-specpipe-edge-device-device",children:"6. Running SpecPipe Edge Device Device"}),"\n",(0,i.jsxs)(n.p,{children:["Run ",(0,i.jsx)(n.code,{children:"specpipe-edge"})," container, which retrieves raw data remotely from the ",(0,i.jsx)(n.code,{children:"rtl_rpcd"})," daemon on the host machine and streams demoulated data to JetStream (take ",(0,i.jsx)(n.code,{children:"fm"})," as example)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker run --rm -d minghsu0107/specpipe-edge fm \\\n    --rpc-server-addr=host.docker.internal \\\n    --rpc-server-port=40000 \\\n    --nats-url=nats://mytoken@host.docker.internal:4222 \\\n    --device-name=dev1 \\\n    --sample-rate=170k \\\n    --freq=99700000\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that ",(0,i.jsx)(n.code,{children:"host.docker.internal"})," is used to access the host machine from the container, but only works on Mac and Windows. If you are using Linux, you can add argument ",(0,i.jsx)(n.code,{children:"--network=host"})," and use ",(0,i.jsx)(n.code,{children:"localhost"})," instead."]}),"\n",(0,i.jsx)(n.h3,{id:"7-setting-up-controller-plane",children:"7. Setting up Controller Plane"}),"\n",(0,i.jsx)(n.p,{children:"Start the API server (controller), which serves as the control plane enabling viewing of registered services and management of device configurations."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker run --rm -p 80:8888 -d minghsu0107/specpipe-server controller \\\n    --http-server-port=8888 \\\n    --nats-url=nats://mytoken@host.docker.internal:4222\n"})}),"\n",(0,i.jsx)(n.p,{children:"Start the API server healthcheck routine."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker run --rm -d minghsu0107/specpipe-server health \\\n    --nats-url=nats://mytoken@host.docker.internal:4222\n"})}),"\n",(0,i.jsx)(n.h5,{id:"cloud-apis",children:"Cloud APIs"}),"\n",(0,i.jsx)(n.p,{children:"View configurations of all registered FM devices."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"curl http://localhost/v0/fm/devices\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example response:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{"devices":[{"freq":"99700000","latitude":0,"longitude":0,"name":"dev1","register_ts":1708125826204,"resample_rate":"32k","sample_rate":"170k","specpipe_version":"v0.2.1"}]}\n'})}),"\n",(0,i.jsx)(n.p,{children:"View configuration of a registered FM device."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"curl http://localhost/v0/fm/devices/<device_name>\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example response:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{"device":{"freq":"99700000","latitude":0,"longitude":0,"name":"dev1","register_ts":1708125826204,"resample_rate":"32k","sample_rate":"170k","specpipe_version":"v0.2.1"}}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Update configuration of a registered FM device. For example, you could tune a device to frequency 94100000 with samping rate 200k on the fly."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'curl -X PUT http://localhost/v0/fm/devices/<device_name> --data \'{"freq":"94100000","sample_rate": "200k"}\'\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You could optionally run the Swagger UI to view all APIs in your browser at ",(0,i.jsx)(n.code,{children:"http://localhost:5555"}),". Before running the following command, you should modify ",(0,i.jsx)(n.code,{children:"server/openapi/main.yaml#/servers.url"})," from ",(0,i.jsx)(n.code,{children:"/v0"})," to ",(0,i.jsx)(n.code,{children:"http://localhost/v0"})," in order to make API's ",(0,i.jsx)(n.code,{children:"Try it out"})," works."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker run --rm -d -p 5555:8080 -e API_URL=api/main.yaml -v $(PWD)/server/openapi:/usr/share/nginx/html/api swaggerapi/swagger-ui\n"})}),"\n",(0,i.jsx)(n.h3,{id:"8-viewing-graphana-dashboard",children:"8. Viewing Graphana Dashboard"}),"\n",(0,i.jsxs)(n.p,{children:["Open ",(0,i.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"})," in your browser to access Grafana. The default username and password are ",(0,i.jsx)(n.code,{children:"admin"})," and ",(0,i.jsx)(n.code,{children:"admin"}),". You could add the Prometheus datasource at ",(0,i.jsx)(n.a,{href:"http://prometheus:9090",children:"http://prometheus:9090"})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>d});var i=s(6540);const r={},l=i.createContext(r);function a(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);